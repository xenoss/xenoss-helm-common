global:
  hosts:
    filex: <change me>
  datamodel:
    configmap:
      name: ""
    location: /opt/xenoss-uploader/conf/datamodel.conf
  databaseconfiguration:
    configmap:
      name: ""
    location: /opt/xenoss-uploader/conf/database-configuration.yaml
    forceTtlDuration: "-1"

  instance:
    name: default
    clickhouse:
      database: test
      host: clickhouse

  storage:
    configurationFrom:
      secret:
        name: "aws-auth"
        properties:
          - source: access-key
            env: AWS_ACCESS_KEY_ID
            target: fs.s3.clouds.identity
          - source: secret-access-key
            env: AWS_SECRET_ACCESS_KEY
            target: fs.s3.clouds.credential
    configuration:
      fs.s3.clouds.endpoint: https://s3.us-east-1.amazonaws.com
      fs.s3.clouds.s3.virtual-host-buckets: false

      fs.default.clouds.scheme: s3
      fs.default.clouds.container: test-logs

  jvm:
    options: |
      -Xmx128M
      -Xss228k
      -XX:+UseG1GC
      -XX:+UseGCOverheadLimit
      -XX:GCTimeLimit=90
      -XX:-OmitStackTraceInFastThrow
      -Dorg.quartz.scheduler.skipUpdateCheck=true
      -Dsun.jnu.encoding=UTF-8
      -Dfile.encoding=UTF-8
  logs:
    loglevel: DEBUG
    configuration: |
      <configuration scan="true">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            </encoder>
        </appender>
      
        <logger name="org" level="ERROR"/>
        <logger name="oap.http.Server" level="${OAP_HTTP_SERVER_LOGGING_LEVEL:-WARN}"/>
        <logger name="io.undertow" level="WARN"/>
        <logger name="oap.application.remote" level="WARN"/>
        <logger name="oap.concurrent" level="WARN"/>
        <logger name="javax.management" level="ERROR" />
        <logger name="net.rubyeye.xmemcached" level="WARN" />
        <logger name="com.clickhouse" level="WARN"/>
      
        <root level="${APP_LOGGING_LEVEL:-DEBUG}">
            <appender-ref ref="STDOUT"/>
        </root>
      </configuration>

  statefulset:
    replicaCount: 1
    enabled: true
  nameOverride: uploader
  fullnameOverride: ""
  commonAnnotations: {}
  commonLabels: {}

  imageRegistry: ""
  imagePullSecrets: []
  extraDeploy: []

  metrics:
    enabled: true
    serviceMonitor:
      enabled: false
    podMonitor:
      enabled: true
      port: httpprivate

  service:
    enabled: true
    clusterIP: None
    ports:
      http: 8080
      httpprivate: 8081
    ## Node ports to expose
    nodePorts:
      http: ""
      httpprivate: ""
    extraPorts:
      - name: http
        port: 8080
        targetPort: http
      - name: httpprivate
        port: 8081
        targetPort: httpprivate

  image:
    registry: docker.xenoss.io
    repository: "xenoss-uploader"
    tag: "XXX"
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    ##   - myRegistryKeySecretName
    loglevel: DEBUG

  command: []
  args: []
  lifecycleHooks: {}
  ##   - name: FOO
  ##     value: "bar"
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""

  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeSelector: {}
  updateStrategy:
    type: RollingUpdate

  podManagementPolicy: Parallel

  resources:
    limits: {}
    requests: {}
#  https://stackoverflow.com/questions/62741285/spark-submit-fails-on-kubernetes-eks-with-invalid-null-input-name
#  podSecurityContext:
#    enabled: true
#    fsGroup: 1001
#  containerSecurityContext:
#    enabled: true
#    runAsUser: 1001
#    runAsNonRoot: true


  existingSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  configMaps: {}

common:
  containerPorts:
    - name: http
      containerPort: 8080
    - name: httpprivate
      containerPort: 8081
  envVars: |
    - name: APP_LOGGING_LEVEL
      value: {{ .Values.global.logs.loglevel | quote }}
    - name: HTTP_FILEX_REMOTE
      value: http://{{ .Values.global.hosts.filex }}:8081/remote/

    - name: DATAMODEL_LOCATION
      value: path({{ .Values.global.datamodel.location }})

    - name: UPLOADER_NAME
      value: {{ .Values.global.instance.name }}
    - name: DATABASE_CONFIGURATION_LOCATION
      value: path({{ .Values.global.databaseconfiguration.location }})
    - name: CLICKHOUSE_HOST
      value: {{ .Values.global.instance.clickhouse.host }}
    - name: CLICKHOUSE_DATABASE
      value: {{ .Values.global.instance.clickhouse.database }}
    - name: CLICKHOUSE_MIGRATION_FORCE_TTL_DURATION
      value: {{ .Values.global.databaseconfiguration.forceTtlDuration | quote }}

    - name: UPLOADER_FILESYSTEM_CONFIGURATION
      value: {{ include "filesystem.configuration" . | quote }}
    {{- include "filesystem.env" . }}

  configMaps:
    default:
      enabled: true
      files:
        vm.options: "{{ .Values.global.jvm.options }}"
        logback.xml: "{{ .Values.global.logs.configuration }}"
  volumes:
    - name: "{{ .Values.global.datamodel.configmap.name }}"
      configMap:
        name: "{{ .Values.global.datamodel.configmap.name }}"
    - name: "{{ .Values.global.databaseconfiguration.configmap.name }}"
      configMap:
        name: "{{ .Values.global.databaseconfiguration.configmap.name }}"
    - name: "{{ include \"common.fullname\" $ }}"
      configMap:
        name: "{{ include \"common.fullname\" $ }}"
  volumeMounts:
    - name: "{{ .Values.global.datamodel.configmap.name }}"
      mountPath: "{{ .Values.global.datamodel.location }}"
      subPath: datamodel.conf
    - name: "{{ .Values.global.databaseconfiguration.configmap.name }}"
      mountPath: "{{ .Values.global.databaseconfiguration.location }}"
      subPath: "database-configuration-{{ .Values.global.instance.name }}.yaml"
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-uploader/conf/vm.options
      subPath: vm.options
      readOnly: true
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-uploader/conf/logback.xml
      subPath: logback.xml
      readOnly: true
