podAnnotations: {}
envVars: []
envVarsSecret: []
#    - my-secret-name
envVarsCM: []
#    - my-configmap-name
volumes: []
configMaps: {}
# default:
#   enabled: false
#   files:
#     "test.txt": |-
#         ...
#     "test.yaml":
#         group:
#           key: value
secretMaps: {}
# default:
#   enabled: false
#   type: Opaque
#   values:
#     password: "123"

containers: []

commonAnnotations: {}
service:
  annotations: {}
pod:
  annotations: {}

containerPorts: []
#  - name: http
#    containerPort: 8080
#  - name: httpprivate
#    containerPort: 8081

global:
  nameOverride: ""
  fullnameOverride: ""
  commonAnnotations: {}
  commonLabels: {}
  podAnnotations: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    enabled: false
  #    fsGroup: 1001
  containerSecurityContext:
    enabled: false
  #    runAsUser: 1001
  #    runAsNonRoot: true

  imageRegistry: ""
  imagePullSecrets: []
  terminationGracePeriodSeconds: ""
  extraDeploy: []
  configMaps: {}
  # default:
  #   enabled: false
  #   files:
  #     "test.txt": |-
  #         ...
  #     "test.yaml":
  #         group:
  #           key: value
  secretMaps: {}
  # default:
  #   enabled: false
  #   type: Opaque
  #   values:
  #     password: "123"
  extraEnvVars: []
  #  - name: key
  #    value: value
  extraEnvVarsSecret: []
  #    - my-secret-name
  extraEnvVarsCM: []
  #    - my-configmap-name

  extraContainerPorts: []
#    - name: http
#      containerPort: 8080
#    - name: httpprivate
#      containerPort: 8081

  startupProbe: {}
  livenessProbe: {}
  readinessProbe: {}

  persistence:
    enabled: false
    annotations: {}
    localpath: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    # default - {{ template "common.fullname" $ }}-storage
    storageClassName: ""
    volumeMode: ""
    #    volumeMode: "Filesystem"
    selector: {}
    #      matchLabels:
    #       app: my-app
    existingVolume: ""

  ingress:
    enabled: false
    pathType: ImplementationSpecific
    hostname: common.local
    ingressClassName: ""
    path: /
    annotations: {}
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    tls: false
    selfSigned: false
    extraHosts: []
    ##   - name: missioncontrol.local
    ##     path: /
    extraPaths: []
    ## - path: /*
    ##   backend:
    ##     serviceName: ssl-redirect
    ##     servicePort: use-annotation
    extraTls: []
    ## - hosts:
    ##     - missioncontrol.local
    ##   secretName: missioncontrol.local-tls
    secrets: []
    ##   - name: missioncontrol.local-tls
    ##     key: |-
    ##       -----BEGIN RSA PRIVATE KEY-----
    ##       ...
    ##       -----END RSA PRIVATE KEY-----
    ##     certificate: |-
    ##       -----BEGIN CERTIFICATE-----
    ##       ...
    ##       -----END CERTIFICATE-----
    extraRules: []
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http

  extraVolumes: []
  extraVolumeMounts: []

  metrics:
    enabled: false
    service:
      ## @param metrics.service.ports.http Metrics service HTTP port
      ##
      ports:
        http: 8081
      ## @param metrics.service.annotations [object] Annotations for enabling prometheus to access the metrics endpoints
      ##
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.service.ports.http }}"

    ## Prometheus Operator ServiceMonitor configuration
    serviceMonitor:
      enabled: false
      port: metrics
      endpoints:
        - path: /metrics
      path: ""
      namespace: ""
      interval: 30s
      scrapeTimeout: ""
      ##   scrapeTimeout: 30s
      labels: {}
      selector: {}
      relabelings: []
      metricRelabelings: []
      honorLabels: false
      jobLabel: ""

    podMonitor:
      enabled: false
      port: metrics
      podMetricsEndpoints:
        - path: /metrics
      path: ""
      namespace: ""
      interval: 30s
      scrapeTimeout: ""
      ##   scrapeTimeout: 30s
      labels: {}
      selector: {}
      relabelings: []
      metricRelabelings: []
      honorLabels: false
      jobLabel: ""

  service:
    enabled: false
    type: ClusterIP
    ports: {}
    #    http: 8080
    #    private: 8081
    ## Node ports to expose
    nodePorts: {}
    #    http: ""
    #    private: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    ##   - 10.10.10.0/24
    annotations: {}
    externalTrafficPolicy: Cluster
    extraPorts: []
    #    - name: http
    #      port: 8080
    #      targetPort: http
    #    - name: httpprivate
    #      port: 8081
    #      targetPort: http
    sessionAffinity: None
    sessionAffinityConfig: {}
    ##   clientIP:
    ##     timeoutSeconds: 300

  pod:
    annotations: {}

  extraContainers: []

  daemonset:
    enabled: false

  deployment:
    enabled: false
    replicaCount: 1

  statefulset:
    enabled: false
    replicaCount: 1
