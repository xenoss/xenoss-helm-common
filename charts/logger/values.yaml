global:
  log_interval_minutes: 5
  disk:
    refresh:
      init_delay: 10s
      period: 10s
  finisher:
    threads: 2
    cron: "0 * * * * ? *"
    safe_interval: 30s
    priority_by_type: {}
#      bids: 100
#      impressions: 10
  file_pattern:
    default: "<YEAR>-<MONTH>/<DAY>/<LOG_TYPE>_v<LOG_VERSION>_<SERVER_HOST>-<YEAR>-<MONTH>-<DAY>-<HOUR>-<INTERVAL>.tsv.gz"
    types: {}
#      BIDS:
#        path: "<YEAR>-<MONTH>/<DAY>/<LOG_TYPE>_v<LOG_VERSION>_<SERVER_HOST>-<YEAR>-<MONTH>-<DAY>-<HOUR>-<INTERVAL>.tsv.gz"
  hosts:
    filex: <change me>

  storage:
    configurationFrom:
      secret:
        name: aws-auth
        properties:
          - source: AWS_ACCESS_KEY_ID
            env: AWS_ACCESS_KEY_ID
            target: fs.s3.clouds.identity
          - source: AWS_SECRET_ACCESS_KEY
            env: AWS_SECRET_ACCESS_KEY
            target: fs.s3.clouds.credential
    configuration:
      fs.s3.clouds.endpoint: https://s3.us-east-1.amazonaws.com
      fs.s3.clouds.s3.virtual-host-buckets: false

      fs.default.clouds.scheme: s3
      fs.default.clouds.container: test-bucket

  jvm:
    heap: 128M
    options: |
      -Xmx{{ .Values.global.jvm.heap }}
      -Xss228k
      -XX:+UseG1GC
      -XX:+UseGCOverheadLimit
      -XX:GCTimeLimit=90
      -XX:-OmitStackTraceInFastThrow
      -Dorg.quartz.scheduler.skipUpdateCheck=true
      -Dsun.jnu.encoding=UTF-8
      -Dfile.encoding=UTF-8
  logs:
    loglevel: DEBUG
    configuration: |
      <configuration scan="true">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            </encoder>
        </appender>
      
        <logger name="org" level="ERROR"/>
        <logger name="oap.http.Server" level="${OAP_HTTP_SERVER_LOGGING_LEVEL:-WARN}"/>
        <logger name="io.undertow" level="WARN"/>
        <logger name="io.netty" level="WARN"/>
        <logger name="oap.application.remote" level="WARN"/>
        <logger name="oap.concurrent" level="WARN"/>
        <logger name="javax.management" level="ERROR" />
        <logger name="net.rubyeye.xmemcached" level="WARN" />
        <logger name="software" level="WARN" />
      
        <root level="${APP_LOGGING_LEVEL:-DEBUG}">
            <appender-ref ref="STDOUT"/>
        </root>
      </configuration>

  statefulset:
    replicaCount: 1
    enabled: true
  nameOverride: logger
  fullnameOverride: ""
  commonAnnotations: {}
  commonLabels: {}

  imageRegistry: ""
  imagePullSecrets: []
  extraDeploy: []

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      port: httpprivate

  service:
    enabled: true
    clusterIP: None
    ports:
      http: 8080
      httpprivate: 8081
    ## Node ports to expose
    nodePorts:
      http: ""
      httpprivate: ""
    extraPorts:
      - name: http
        port: 8080
        targetPort: http
      - name: httpprivate
        port: 8081
        targetPort: httpprivate

  image:
    registry: docker.xenoss.io
    repository: "xenoss-logger"
    tag: "XXX"
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    ##   - myRegistryKeySecretName
    loglevel: DEBUG

  command: []
  args: []

  livenessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 10
    failureThreshold: 6
    successThreshold: 1
    httpGet:
      path: /healtz
      port: httpprivate

  lifecycleHooks: {}
  ##   - name: FOO
  ##     value: "bar"
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""

  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeSelector: {}
  updateStrategy:
    type: RollingUpdate

  podManagementPolicy: Parallel

  resources:
    limits: {}
    requests: {}
  #  https://stackoverflow.com/questions/62741285/spark-submit-fails-on-kubernetes-eks-with-invalid-null-input-name
  #  podSecurityContext:
  #    enabled: true
  #    fsGroup: 1001
  #  containerSecurityContext:
  #    enabled: true
  #    runAsUser: 1001
  #    runAsNonRoot: true


  existingSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  configMaps: {}

  persistence:
    enabled: true
    size: 1Gi
    localpath: ""
    storageClassName: ""

common:
  containerPorts:
    - name: http
      containerPort: 8080
    - name: httpprivate
      containerPort: 8081
  envVars: |
    - name: APP_LOGGING_LEVEL
      value: "{{ .Values.global.logs.loglevel }}"
    - name: HTTP_FILEX_REMOTE
      value: "http://{{ .Values.global.hosts.filex }}:8081/remote/"

    - name: LOGGER_IN_DIRECTORY
      value: /opt/xenoss-logger/logs/current
    - name: LOGGER_OUT_DIRECTORY
      value: /opt/xenoss-logger/logs

    - name: UPLOADER_THREADS
      value: {{ .Values.global.finisher.threads  | quote }}
    - name: UPLOADER_FILESYSTEM_CONFIGURATION
      value: {{ include "filesystem.configuration" . | quote }}
    - name: FILE_PATTERN
      value: {{ .Values.global.file_pattern.default }}
    - name: FILE_PATTERN_BY_TYPE
      value: json({{ .Values.global.file_pattern.types | toJson }})
    - name: FINISHER_PRIORITY_BY_TYPE
      value: json({{ .Values.global.finisher.priority_by_type | toJson }})
    - name: BUCKETS_PER_HOUR
      value: {{ div 60 .Values.global.log_interval_minutes | quote }}
    - name: UPLOADER_CRON
      value: {{ .Values.global.finisher.cron | quote }}
    - name: UPLOADER_SAFE_INTERVAL
      value: {{ .Values.global.finisher.safe_interval | quote }}
    - name: UPLOADER_REFRESH_INIT_DELAY
      value: {{ .Values.global.disk.refresh.init_delay | quote }}
    - name: UPLOADER_REFRESH_PERIOD
      value: {{ .Values.global.disk.refresh.period | quote }}
    {{- include "filesystem.env" . }}

  configMaps:
    default:
      enabled: true
      files:
        vm.options: "{{ include \"common.tpl\" ( dict \"Template\" .Values.global.jvm.options \"Root\" $ ) }}"
        logback.xml: "{{ .Values.global.logs.configuration }}"
  volumes:
    - name: "{{ include \"common.fullname\" $ }}"
      configMap:
        name: "{{ include \"common.fullname\" $ }}"
    - name: storage
      persistentVolumeClaim:
        claimName: data-{{ include "common.fullname" $ }}
  volumeMounts:
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-logger/conf/vm.options
      subPath: vm.options
      readOnly: true
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-logger/conf/logback.xml
      subPath: logback.xml
      readOnly: true
    - name: storage
      mountPath: /opt/xenoss-logger/logs
