global:
  region: unknown
  modules:
    frequency_capping:
      enabled: false
      user_profile_id_path: "${ifa}"
  aerospike:
    readTimeout: 30
    readBatchTimeout: 30
    writeTimeout: 2s
    connectionTimeout: 10s
  messages:
    persistence_directory: /opt/xenoss-bidder/messages
  hosts:
    memcached: "<change me>"
    missioncontrol: "<change me>"
    campaigncontrol: "<change me>"
    aerospike: "<change me>"
    logger: "<change me>"
    bidder:
      impression: <change me>
      event: <change me>
  exchanges:
    configmap:
      name: ""

  storage:
    configurationFrom:
      secret:
        name: "aws-auth"
        properties:
          - source: access-key
            env: AWS_ACCESS_KEY_ID
            target: fs.s3.clouds.identity
          - source: secret-access-key
            env: AWS_SECRET_ACCESS_KEY
            target: fs.s3.clouds.credential
    configuration:
      fs.s3.clouds.endpoint: https://s3.us-east-1.amazonaws.com
      fs.s3.clouds.s3.virtual-host-buckets: false

      fs.default.clouds.scheme: s3
      fs.default.clouds.container: test-logs

  datamodel:
    configmap:
      name: ""
    location: /opt/xenoss-bidder/conf/datamodel.conf
  pools:
    requestWorkers: 100
  jvm:
    heap: 800M
    options: |
      -Xmx{{ .Values.global.jvm.heap }}
      -Xss228k
      -XX:+UseG1GC
      -XX:+UseGCOverheadLimit
      -XX:GCTimeLimit=90
      -XX:-OmitStackTraceInFastThrow
      -Dorg.quartz.scheduler.skipUpdateCheck=true
      -Dsun.jnu.encoding=UTF-8
      -Dfile.encoding=UTF-8
  logs:
    loglevel: DEBUG
    configuration: |
      <configuration scan="true">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            </encoder>
        </appender>
      
        <logger name="org" level="ERROR"/>
        <logger name="oap.http.Server" level="${OAP_HTTP_SERVER_LOGGING_LEVEL:-WARN}"/>
        <logger name="oap.message" level="WARN"/>
        <logger name="io.undertow" level="WARN"/>
        <logger name="oap.application.remote" level="WARN"/>
        <logger name="javax.management" level="ERROR" />
        <logger name="net.rubyeye.xmemcached" level="WARN" />
        <logger name="com.google.code.yanf4j" level="WARN" />
        <logger name="oap.concurrent.scheduler" level="WARN" />
      
        <root level="${APP_LOGGING_LEVEL:-DEBUG}">
            <appender-ref ref="STDOUT"/>
        </root>
      </configuration>

  daemonset:
    enabled: true
  nameOverride: bidder
  fullnameOverride: ""
  commonAnnotations: {}
  commonLabels: {}

  imageRegistry: ""
  imagePullSecrets: []
  extraDeploy: []

  metrics:
    enabled: true
    serviceMonitor:
      enabled: false
    podMonitor:
      enabled: true
      port: httpprivate
  service:
    enabled: false

  image:
    registry: docker.xenoss.io
    repository: "xenoss-bidder"
    tag: "XXX"
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    ##   - myRegistryKeySecretName
    loglevel: DEBUG

  command: []
  args: []

  livenessProbe:
    periodSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    httpGet:
      path: /healtz
      port: httpprivate
      scheme: HTTP

  readinessProbe:
    timeoutSeconds: 1
    periodSeconds: 2
    failureThreshold: 2
    successThreshold: 1
    exec:
      command:
        - test
        - -f
        - /var/tmp/ready.txt

  startupProbe:
    failureThreshold: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    httpGet:
      path: /healtz
      port: httpprivate
      scheme: HTTP

  lifecycleHooks:
    postStart:
      exec:
        command:
          - touch
          - /var/tmp/ready.txt
    preStop:
      exec:
        command:
          - bash
          - -c
          - rm -f /var/tmp/ready.txt; sleep 90

  ##   - name: FOO
  ##     value: "bar"
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""

  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeSelector: {}
  updateStrategy:
    type: RollingUpdate

  podManagementPolicy: Parallel

  resources:
    limits: {}
    requests: {}
#      memory: 256Mi
#      cpu: 300m
  #  podSecurityContext:
  #    enabled: true
  #    fsGroup: 1001
  #  containerSecurityContext:
  #    enabled: true
  #    runAsUser: 1001
  #    runAsNonRoot: true


  existingSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  configMaps: {}
  terminationGracePeriodSeconds: "120"

  extraContainerPorts:
    - name: http
      containerPort: 8080

common:
  containerPorts:
    - name: httpprivate
      containerPort: 8081
  envVars: |
    - name: OAP_BOOT_MODULE_FREQUENCY_CAPPING
      value: "{{ .Values.global.modules.frequency_capping.enabled }}"
    - name: OAP_BOOT_MODULE_FREQUENCY_CAPPING_USER_PROFILE_ID_PATH
      value: "{{ .Values.global.modules.frequency_capping.user_profile_id_path }}"
    - name: TRAFFIC_OFF
      value: "false"
    - name: APP_LOGGING_LEVEL
      value: "{{ .Values.global.logs.loglevel }}"
    - name: REQUEST_WORKERS
      value: "{{ .Values.global.pools.requestWorkers }}"
    - name: DATAMODEL_PATH
      value: "path({{ .Values.global.datamodel.location }})"
    - name: DUPLICATE_IMPRESSIONS_STORAGE_MEMCACHED_HOST
      value: "{{ .Values.global.hosts.memcached }}"
    - name: HTTP_MC_REMOTE
      value: "http://{{ .Values.global.hosts.missioncontrol }}:8081/remote/"
    - name: HTTP_CC_REMOTE
      value: "http://{{ .Values.global.hosts.campaigncontrol }}:8081/remote/"
    - name: MESSAGE_SERVER_HOST
      value: "{{ .Values.global.hosts.missioncontrol }}"
    - name: MESSAGE_CLIENT_LOGGING_PERSISTENCE_DIRECTORY
      value: "{{ .Values.global.messages.persistence_directory }}"
    - name: AEROSPIKE_HOSTS
      value: "{{ .Values.global.hosts.aerospike }}"
    - name: AEROSPIKE_READ_TIMEOUT
      value: "{{ .Values.global.aerospike.readTimeout }}"
    - name: AEROSPIKE_BATCH_TIMEOUT
      value: "{{ .Values.global.aerospike.readBatchTimeout }}"
    - name: AEROSPIKE_WRITE_TIMEOUT
      value: "{{ .Values.global.aerospike.writeTimeout }}"
    - name: AEROSPIKE_CONNECTION_TIMEOUT
      value: "{{ .Values.global.aerospike.connectionTimeout }}"
    - name: LOGGING_HOST
      value: "{{ .Values.global.hosts.logger }}"
    - name: BIDDER_IMPR_HOST
      value: "{{ .Values.global.hosts.bidder.impression }}"
    - name: BIDDER_EVENT_HOST
      value: "{{ .Values.global.hosts.bidder.event }}"
    - name: REGION
      value: "{{ .Values.global.region }}"
    - name: FILESYSTEM_CONFIGURATION
      value: {{ include "filesystem.configuration" . | quote }}
    {{- include "filesystem.env" . }}

  configMaps:
    default:
      enabled: true
      files:
        vm.options: "{{ include \"common.tpl\" ( dict \"Template\" .Values.global.jvm.options \"Root\" $ ) }}"
        logback.xml: "{{ .Values.global.logs.configuration }}"
  volumes:
    - name: "{{ .Values.global.exchanges.configmap.name }}"
      configMap:
        name: "{{ .Values.global.exchanges.configmap.name }}"
    - name: "{{ .Values.global.datamodel.configmap.name }}"
      configMap:
        name: "{{ .Values.global.datamodel.configmap.name }}"
    - name: "{{ include \"common.fullname\" $ }}"
      configMap:
        name: "{{ include \"common.fullname\" $ }}"
  volumeMounts:
    - name: "{{ .Values.global.exchanges.configmap.name }}"
      mountPath: /opt/xenoss-bidder/conf/exchanges.yaml
      subPath: exchanges.yaml
    - name: "{{ .Values.global.datamodel.configmap.name }}"
      mountPath: "{{ .Values.global.datamodel.location }}"
      subPath: datamodel.conf
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-bidder/conf/vm.options
      subPath: vm.options
      readOnly: true
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-bidder/conf/logback.xml
      subPath: logback.xml
      readOnly: true
