global:
  messages:
    persistence_directory: /opt/xenoss-bidder/messages
  hosts:
    memcached: "<change me>"
    missioncontrol: "<change me>"
  exchanges:
    configmap:
      name: ""
  datamodel:
    configmap:
      name: ""
    location: /opt/xenoss-bidder/conf/datamodel
  pools:
    requestWorkers: 100
  jvm:
    options: |
      -Xmx800M
      -Xss228k
      -XX:+UseG1GC
      -XX:+UseGCOverheadLimit
      -XX:GCTimeLimit=90
      -XX:-OmitStackTraceInFastThrow
      -Dorg.quartz.scheduler.skipUpdateCheck=true
      -Dsun.jnu.encoding=UTF-8
      -Dfile.encoding=UTF-8
  logs:
    loglevel: DEBUG
    configuration: |
      <configuration scan="true">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            </encoder>
        </appender>
      
        <logger name="org" level="ERROR"/>
        <logger name="oap.http.Server" level="${OAP_HTTP_SERVER_LOGGING_LEVEL:-WARN}"/>
        <logger name="oap.message" level="WARN"/>
        <logger name="io.undertow" level="WARN"/>
        <logger name="oap.application.remote" level="WARN"/>
        <logger name="javax.management" level="ERROR" />
        <logger name="net.rubyeye.xmemcached" level="WARN" />
        <logger name="com.google.code.yanf4j" level="WARN" />
        <logger name=" oap.concurrent.scheduler" level="WARN" />
      
        <root level="${APP_LOGGING_LEVEL:-DEBUG}">
            <appender-ref ref="STDOUT"/>
        </root>
      </configuration>

  daemonset:
    enabled: true
  nameOverride: bidder
  fullnameOverride: ""
  commonAnnotations: {}
  commonLabels: {}

  imageRegistry: ""
  imagePullSecrets: []
  extraDeploy: []

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      port: httpprivate
  service:
    enabled: false

  image:
    registry: docker.xenoss.io
    repository: "xenoss-bidder"
    tag: "XXX"
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    ##   - myRegistryKeySecretName
    loglevel: DEBUG

  command: []
  args: []
  lifecycleHooks: {}
  ##   - name: FOO
  ##     value: "bar"
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""

  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeSelector: {}
  updateStrategy:
    type: RollingUpdate

  podManagementPolicy: Parallel

  resources:
    limits: {}
    requests:
      memory: 256Mi
      cpu: 300m
#  podSecurityContext:
#    enabled: true
#    fsGroup: 1001
#  containerSecurityContext:
#    enabled: true
#    runAsUser: 1001
#    runAsNonRoot: true


  existingSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  configMaps: {}

common:
  containerPorts:
    - name: http
      containerPort: 8080
    - name: httpprivate
      containerPort: 8081
  envVars:
    - name: TRAFFIC_OFF
      value: "false"
    - name: APP_LOGGING_LEVEL
      value: "{{ .Values.global.logs.loglevel }}"
    - name: REQUEST_WORKERS
      value: "{{ .Values.global.pools.requestWorkers }}"
    - name: DATAMODEL_LOCATION
      value: "{{ .Values.global.datamodel.location }}"
    - name: DUPLICATE_IMPRESSIONS_STORAGE_MEMCACHED_HOST
      value: "{{ .Values.global.hosts.memcached }}"
    - name: HTTP_MC_REMOTE
      value: "http://{{ .Values.global.hosts.missioncontrol }}:8081/remote/"
    - name: MESSAGE_SERVER_HOST
      value: "{{ .Values.global.hosts.missioncontrol }}"
    - name: MESSAGE_CLIENT_LOGGING_PERSISTENCE_DIRECTORY
      value: "{{ .Values.global.messages.persistence_directory }}"
  configMaps:
    default:
      enabled: true
      files:
        vm.options: "{{ .Values.global.jvm.options }}"
        logback.xml: "{{ .Values.global.logs.configuration }}"
  volumes:
    - name: "{{ .Values.global.exchanges.configmap.name }}"
      configMap:
        name: "{{ .Values.global.exchanges.configmap.name }}"
    - name: "{{ .Values.global.datamodel.configmap.name }}"
      configMap:
        name: "{{ .Values.global.datamodel.configmap.name }}"
    - name: "{{ include \"common.fullname\" $ }}"
      configMap:
        name: "{{ include \"common.fullname\" $ }}"
  volumeMounts:
    - name: "{{ .Values.global.exchanges.configmap.name }}"
      mountPath: /opt/xenoss-bidder/conf/exchanges.yaml
      subPath: exchanges.yaml
    - name: "{{ .Values.global.datamodel.configmap.name }}"
      mountPath: "{{ .Values.global.datamodel.location }}/config.v1.conf"
      subPath: datamodel.conf
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-bidder/conf/vm.options
      subPath: vm.options
      readOnly: true
    - name: "{{ include \"common.fullname\" $ }}"
      mountPath: /opt/xenoss-bidder/conf/logback.xml
      subPath: logback.xml
      readOnly: true
